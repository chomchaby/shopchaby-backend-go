// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: cart.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCart = `-- name: CreateCart :one
INSERT INTO cart (user_email, subproduct_id, quantity)
VALUES ($1, $2, $3) 
RETURNING user_email, subproduct_id, quantity, created_at, updated_at
`

type CreateCartParams struct {
	UserEmail    string    `json:"user_email"`
	SubproductID uuid.UUID `json:"subproduct_id"`
	Quantity     int32     `json:"quantity"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, createCart, arg.UserEmail, arg.SubproductID, arg.Quantity)
	var i Cart
	err := row.Scan(
		&i.UserEmail,
		&i.SubproductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCart = `-- name: DeleteCart :exec
DELETE FROM cart
WHERE user_email = $1 AND subproduct_id = $2
`

type DeleteCartParams struct {
	UserEmail    string    `json:"user_email"`
	SubproductID uuid.UUID `json:"subproduct_id"`
}

func (q *Queries) DeleteCart(ctx context.Context, arg DeleteCartParams) error {
	_, err := q.db.ExecContext(ctx, deleteCart, arg.UserEmail, arg.SubproductID)
	return err
}

const getCart = `-- name: GetCart :one
SELECT user_email, subproduct_id, quantity, created_at, updated_at FROM cart
WHERE user_email = $1 AND subproduct_id = $2
`

type GetCartParams struct {
	UserEmail    string    `json:"user_email"`
	SubproductID uuid.UUID `json:"subproduct_id"`
}

func (q *Queries) GetCart(ctx context.Context, arg GetCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, getCart, arg.UserEmail, arg.SubproductID)
	var i Cart
	err := row.Scan(
		&i.UserEmail,
		&i.SubproductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCarts = `-- name: ListCarts :many
SELECT user_email, subproduct_id, quantity, created_at, updated_at FROM cart
ORDER BY user_email, created_at
`

func (q *Queries) ListCarts(ctx context.Context) ([]Cart, error) {
	rows, err := q.db.QueryContext(ctx, listCarts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cart{}
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.UserEmail,
			&i.SubproductID,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCartsByUser = `-- name: ListCartsByUser :many
SELECT user_email, subproduct_id, quantity, created_at, updated_at FROM cart
WHERE user_email = $1
ORDER BY created_at
`

func (q *Queries) ListCartsByUser(ctx context.Context, userEmail string) ([]Cart, error) {
	rows, err := q.db.QueryContext(ctx, listCartsByUser, userEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cart{}
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.UserEmail,
			&i.SubproductID,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCart = `-- name: UpdateCart :one
UPDATE cart
SET quantity = $3
WHERE user_email = $1 AND subproduct_id = $2
RETURNING user_email, subproduct_id, quantity, created_at, updated_at
`

type UpdateCartParams struct {
	UserEmail    string    `json:"user_email"`
	SubproductID uuid.UUID `json:"subproduct_id"`
	Quantity     int32     `json:"quantity"`
}

func (q *Queries) UpdateCart(ctx context.Context, arg UpdateCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, updateCart, arg.UserEmail, arg.SubproductID, arg.Quantity)
	var i Cart
	err := row.Scan(
		&i.UserEmail,
		&i.SubproductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
