// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: favorite.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createFavorite = `-- name: CreateFavorite :one
INSERT INTO favorite (user_email, product_id)
VALUES ($1, $2) 
RETURNING user_email, product_id, timestamp
`

type CreateFavoriteParams struct {
	UserEmail string    `json:"user_email"`
	ProductID uuid.UUID `json:"product_id"`
}

func (q *Queries) CreateFavorite(ctx context.Context, arg CreateFavoriteParams) (Favorite, error) {
	row := q.db.QueryRowContext(ctx, createFavorite, arg.UserEmail, arg.ProductID)
	var i Favorite
	err := row.Scan(&i.UserEmail, &i.ProductID, &i.Timestamp)
	return i, err
}

const deleteFavorite = `-- name: DeleteFavorite :exec
DELETE FROM favorite
WHERE user_email = $1 AND product_id = $2
`

type DeleteFavoriteParams struct {
	UserEmail string    `json:"user_email"`
	ProductID uuid.UUID `json:"product_id"`
}

func (q *Queries) DeleteFavorite(ctx context.Context, arg DeleteFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, deleteFavorite, arg.UserEmail, arg.ProductID)
	return err
}

const getFavorite = `-- name: GetFavorite :one
SELECT user_email, product_id, timestamp FROM favorite
WHERE user_email = $1 AND product_id = $2
`

type GetFavoriteParams struct {
	UserEmail string    `json:"user_email"`
	ProductID uuid.UUID `json:"product_id"`
}

func (q *Queries) GetFavorite(ctx context.Context, arg GetFavoriteParams) (Favorite, error) {
	row := q.db.QueryRowContext(ctx, getFavorite, arg.UserEmail, arg.ProductID)
	var i Favorite
	err := row.Scan(&i.UserEmail, &i.ProductID, &i.Timestamp)
	return i, err
}

const listFavorites = `-- name: ListFavorites :many
SELECT user_email, product_id, timestamp FROM favorite
ORDER BY product_id, timestamp
`

func (q *Queries) ListFavorites(ctx context.Context) ([]Favorite, error) {
	rows, err := q.db.QueryContext(ctx, listFavorites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Favorite{}
	for rows.Next() {
		var i Favorite
		if err := rows.Scan(&i.UserEmail, &i.ProductID, &i.Timestamp); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFavoritesByUser = `-- name: ListFavoritesByUser :many
SELECT user_email, product_id, timestamp FROM favorite
WHERE user_email = $1
ORDER BY timestamp
`

func (q *Queries) ListFavoritesByUser(ctx context.Context, userEmail string) ([]Favorite, error) {
	rows, err := q.db.QueryContext(ctx, listFavoritesByUser, userEmail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Favorite{}
	for rows.Next() {
		var i Favorite
		if err := rows.Scan(&i.UserEmail, &i.ProductID, &i.Timestamp); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
