// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: product.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO product (category, name, description, store_id, suspend)
VALUES ($1, $2, $3, $4, $5) 
RETURNING id, category, name, description, store_id, suspend, max_price, min_price, onsale, vendible, created_at, updated_at
`

type CreateProductParams struct {
	Category    string    `json:"category"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	StoreID     uuid.UUID `json:"store_id"`
	Suspend     bool      `json:"suspend"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Category,
		arg.Name,
		arg.Description,
		arg.StoreID,
		arg.Suspend,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.Name,
		&i.Description,
		&i.StoreID,
		&i.Suspend,
		&i.MaxPrice,
		&i.MinPrice,
		&i.Onsale,
		&i.Vendible,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM product
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, category, name, description, store_id, suspend, max_price, min_price, onsale, vendible, created_at, updated_at FROM product
WHERE id = $1
`

func (q *Queries) GetProduct(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.Name,
		&i.Description,
		&i.StoreID,
		&i.Suspend,
		&i.MaxPrice,
		&i.MinPrice,
		&i.Onsale,
		&i.Vendible,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, category, name, description, store_id, suspend, max_price, min_price, onsale, vendible, created_at, updated_at FROM product
ORDER BY category, id
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Category,
			&i.Name,
			&i.Description,
			&i.StoreID,
			&i.Suspend,
			&i.MaxPrice,
			&i.MinPrice,
			&i.Onsale,
			&i.Vendible,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByCategory = `-- name: ListProductsByCategory :many
SELECT id, category, name, description, store_id, suspend, max_price, min_price, onsale, vendible, created_at, updated_at FROM product
WHERE category = $1
ORDER BY id
`

func (q *Queries) ListProductsByCategory(ctx context.Context, category string) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Category,
			&i.Name,
			&i.Description,
			&i.StoreID,
			&i.Suspend,
			&i.MaxPrice,
			&i.MinPrice,
			&i.Onsale,
			&i.Vendible,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByFilter = `-- name: ListProductsByFilter :many
SELECT id, category, name, description, store_id, suspend, max_price, min_price, onsale, vendible, created_at, updated_at FROM product
WHERE category = $1 AND ((min_price <= 32 AND min_price >= $3) OR (max_price <= $2 AND max_price >= $3))
ORDER BY onsale DESC
`

type ListProductsByFilterParams struct {
	Category string        `json:"category"`
	MaxPrice sql.NullInt32 `json:"max_price"`
	MinPrice sql.NullInt32 `json:"min_price"`
}

func (q *Queries) ListProductsByFilter(ctx context.Context, arg ListProductsByFilterParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByFilter, arg.Category, arg.MaxPrice, arg.MinPrice)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Category,
			&i.Name,
			&i.Description,
			&i.StoreID,
			&i.Suspend,
			&i.MaxPrice,
			&i.MinPrice,
			&i.Onsale,
			&i.Vendible,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByName = `-- name: ListProductsByName :many
SELECT id, category, name, description, store_id, suspend, max_price, min_price, onsale, vendible, created_at, updated_at FROM product
WHERE name = $1 
ORDER BY onsale DESC
`

func (q *Queries) ListProductsByName(ctx context.Context, name string) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Category,
			&i.Name,
			&i.Description,
			&i.StoreID,
			&i.Suspend,
			&i.MaxPrice,
			&i.MinPrice,
			&i.Onsale,
			&i.Vendible,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByStoreAndCategory = `-- name: ListProductsByStoreAndCategory :many
SELECT id, category, name, description, store_id, suspend, max_price, min_price, onsale, vendible, created_at, updated_at FROM product
WHERE store_id = $1 AND category = $2
ORDER BY name
`

type ListProductsByStoreAndCategoryParams struct {
	StoreID  uuid.UUID `json:"store_id"`
	Category string    `json:"category"`
}

func (q *Queries) ListProductsByStoreAndCategory(ctx context.Context, arg ListProductsByStoreAndCategoryParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByStoreAndCategory, arg.StoreID, arg.Category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Category,
			&i.Name,
			&i.Description,
			&i.StoreID,
			&i.Suspend,
			&i.MaxPrice,
			&i.MinPrice,
			&i.Onsale,
			&i.Vendible,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE product
SET category = $2, name = $3, description = $4, suspend = $5
WHERE id = $1
RETURNING id, category, name, description, store_id, suspend, max_price, min_price, onsale, vendible, created_at, updated_at
`

type UpdateProductParams struct {
	ID          uuid.UUID `json:"id"`
	Category    string    `json:"category"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Suspend     bool      `json:"suspend"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ID,
		arg.Category,
		arg.Name,
		arg.Description,
		arg.Suspend,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.Name,
		&i.Description,
		&i.StoreID,
		&i.Suspend,
		&i.MaxPrice,
		&i.MinPrice,
		&i.Onsale,
		&i.Vendible,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
