// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: product_category.sql

package db

import (
	"context"
)

const createProductCategory = `-- name: CreateProductCategory :one
INSERT INTO product_category (name, pic_url)
VALUES ($1, $2) 
RETURNING name, pic_url, created_at, updated_at
`

type CreateProductCategoryParams struct {
	Name   string `json:"name"`
	PicUrl string `json:"pic_url"`
}

func (q *Queries) CreateProductCategory(ctx context.Context, arg CreateProductCategoryParams) (ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, createProductCategory, arg.Name, arg.PicUrl)
	var i ProductCategory
	err := row.Scan(
		&i.Name,
		&i.PicUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProductCategory = `-- name: DeleteProductCategory :exec
DELETE FROM product_category
WHERE name = $1
`

func (q *Queries) DeleteProductCategory(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteProductCategory, name)
	return err
}

const getProductCategory = `-- name: GetProductCategory :one
SELECT name, pic_url, created_at, updated_at FROM product_category
WHERE name = $1
`

func (q *Queries) GetProductCategory(ctx context.Context, name string) (ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, getProductCategory, name)
	var i ProductCategory
	err := row.Scan(
		&i.Name,
		&i.PicUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProductCategories = `-- name: ListProductCategories :many
SELECT name, pic_url, created_at, updated_at FROM product_category
ORDER BY name
`

func (q *Queries) ListProductCategories(ctx context.Context) ([]ProductCategory, error) {
	rows, err := q.db.QueryContext(ctx, listProductCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductCategory{}
	for rows.Next() {
		var i ProductCategory
		if err := rows.Scan(
			&i.Name,
			&i.PicUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductCategory = `-- name: UpdateProductCategory :one
UPDATE product_category
SET name = $2, pic_url= $3
WHERE name = $1
RETURNING name, pic_url, created_at, updated_at
`

type UpdateProductCategoryParams struct {
	Name   string `json:"name"`
	Name_2 string `json:"name_2"`
	PicUrl string `json:"pic_url"`
}

func (q *Queries) UpdateProductCategory(ctx context.Context, arg UpdateProductCategoryParams) (ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, updateProductCategory, arg.Name, arg.Name_2, arg.PicUrl)
	var i ProductCategory
	err := row.Scan(
		&i.Name,
		&i.PicUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
