// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: product_image.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createProductImage = `-- name: CreateProductImage :one
INSERT INTO product_image (product_id, title, pic_url, is_default)
VALUES ($1, $2, $3, $4) 
RETURNING id, product_id, title, pic_url, is_default, created_at, updated_at
`

type CreateProductImageParams struct {
	ProductID uuid.UUID `json:"product_id"`
	Title     string    `json:"title"`
	PicUrl    string    `json:"pic_url"`
	IsDefault bool      `json:"is_default"`
}

func (q *Queries) CreateProductImage(ctx context.Context, arg CreateProductImageParams) (ProductImage, error) {
	row := q.db.QueryRowContext(ctx, createProductImage,
		arg.ProductID,
		arg.Title,
		arg.PicUrl,
		arg.IsDefault,
	)
	var i ProductImage
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Title,
		&i.PicUrl,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProductImage = `-- name: DeleteProductImage :exec
DELETE FROM product_image
WHERE id = $1
`

func (q *Queries) DeleteProductImage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProductImage, id)
	return err
}

const deleteProductImagesByProductID = `-- name: DeleteProductImagesByProductID :exec
DELETE FROM product_image
WHERE product_id = $1
`

func (q *Queries) DeleteProductImagesByProductID(ctx context.Context, productID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProductImagesByProductID, productID)
	return err
}

const getProductImage = `-- name: GetProductImage :one
SELECT id, product_id, title, pic_url, is_default, created_at, updated_at FROM product_image
WHERE id = $1
`

func (q *Queries) GetProductImage(ctx context.Context, id uuid.UUID) (ProductImage, error) {
	row := q.db.QueryRowContext(ctx, getProductImage, id)
	var i ProductImage
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Title,
		&i.PicUrl,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProductImages = `-- name: ListProductImages :many
SELECT id, product_id, title, pic_url, is_default, created_at, updated_at FROM product_image
ORDER BY product_id
`

func (q *Queries) ListProductImages(ctx context.Context) ([]ProductImage, error) {
	rows, err := q.db.QueryContext(ctx, listProductImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductImage{}
	for rows.Next() {
		var i ProductImage
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Title,
			&i.PicUrl,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductImagesByProductID = `-- name: ListProductImagesByProductID :many
SELECT id, product_id, title, pic_url, is_default, created_at, updated_at FROM product_image
WHERE product_id = $1
ORDER BY is_default DESC
`

func (q *Queries) ListProductImagesByProductID(ctx context.Context, productID uuid.UUID) ([]ProductImage, error) {
	rows, err := q.db.QueryContext(ctx, listProductImagesByProductID, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductImage{}
	for rows.Next() {
		var i ProductImage
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Title,
			&i.PicUrl,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductImage = `-- name: UpdateProductImage :one
UPDATE product_image
SET product_id = $2, title = $3, pic_url= $4
WHERE id = $1
RETURNING id, product_id, title, pic_url, is_default, created_at, updated_at
`

type UpdateProductImageParams struct {
	ID        uuid.UUID `json:"id"`
	ProductID uuid.UUID `json:"product_id"`
	Title     string    `json:"title"`
	PicUrl    string    `json:"pic_url"`
}

func (q *Queries) UpdateProductImage(ctx context.Context, arg UpdateProductImageParams) (ProductImage, error) {
	row := q.db.QueryRowContext(ctx, updateProductImage,
		arg.ID,
		arg.ProductID,
		arg.Title,
		arg.PicUrl,
	)
	var i ProductImage
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Title,
		&i.PicUrl,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
