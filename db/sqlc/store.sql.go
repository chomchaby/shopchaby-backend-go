// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: store.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createStore = `-- name: CreateStore :one
INSERT INTO store (user_email, name, description, address, phone, pic_url)
VALUES ($1, $2, $3, $4, $5, $6) 
RETURNING id, user_email, name, description, address, phone, pic_url, balance, created_at, updated_at
`

type CreateStoreParams struct {
	UserEmail   string `json:"user_email"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Address     string `json:"address"`
	Phone       string `json:"phone"`
	PicUrl      string `json:"pic_url"`
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, createStore,
		arg.UserEmail,
		arg.Name,
		arg.Description,
		arg.Address,
		arg.Phone,
		arg.PicUrl,
	)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.UserEmail,
		&i.Name,
		&i.Description,
		&i.Address,
		&i.Phone,
		&i.PicUrl,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStore = `-- name: DeleteStore :exec
DELETE FROM store 
WHERE id = $1
`

func (q *Queries) DeleteStore(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteStore, id)
	return err
}

const getStore = `-- name: GetStore :one
SELECT id, user_email, name, description, address, phone, pic_url, balance, created_at, updated_at FROM store
WHERE id = $1
`

func (q *Queries) GetStore(ctx context.Context, id uuid.UUID) (Store, error) {
	row := q.db.QueryRowContext(ctx, getStore, id)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.UserEmail,
		&i.Name,
		&i.Description,
		&i.Address,
		&i.Phone,
		&i.PicUrl,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStoreByUserEmail = `-- name: GetStoreByUserEmail :one
SELECT id, user_email, name, description, address, phone, pic_url, balance, created_at, updated_at FROM store
WHERE user_email = $1
`

func (q *Queries) GetStoreByUserEmail(ctx context.Context, userEmail string) (Store, error) {
	row := q.db.QueryRowContext(ctx, getStoreByUserEmail, userEmail)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.UserEmail,
		&i.Name,
		&i.Description,
		&i.Address,
		&i.Phone,
		&i.PicUrl,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listStores = `-- name: ListStores :many
SELECT id, user_email, name, description, address, phone, pic_url, balance, created_at, updated_at FROM store
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListStoresParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListStores(ctx context.Context, arg ListStoresParams) ([]Store, error) {
	rows, err := q.db.QueryContext(ctx, listStores, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Store{}
	for rows.Next() {
		var i Store
		if err := rows.Scan(
			&i.ID,
			&i.UserEmail,
			&i.Name,
			&i.Description,
			&i.Address,
			&i.Phone,
			&i.PicUrl,
			&i.Balance,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStore = `-- name: UpdateStore :one
UPDATE store
SET name = $2, description = $3, address = $4, phone = $5, pic_url = $6
WHERE id = $1
RETURNING id, user_email, name, description, address, phone, pic_url, balance, created_at, updated_at
`

type UpdateStoreParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Address     string    `json:"address"`
	Phone       string    `json:"phone"`
	PicUrl      string    `json:"pic_url"`
}

func (q *Queries) UpdateStore(ctx context.Context, arg UpdateStoreParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, updateStore,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Address,
		arg.Phone,
		arg.PicUrl,
	)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.UserEmail,
		&i.Name,
		&i.Description,
		&i.Address,
		&i.Phone,
		&i.PicUrl,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
