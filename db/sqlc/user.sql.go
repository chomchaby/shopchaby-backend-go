// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (email, username, pwd_hash, phone, address)
VALUES ($1, $2, $3, $4, $5) 
RETURNING email, username, pwd_hash, phone, address, balance, created_at, updated_at
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
	PwdHash  string `json:"pwd_hash"`
	Phone    string `json:"phone"`
	Address  string `json:"address"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.PwdHash,
		arg.Phone,
		arg.Address,
	)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Username,
		&i.PwdHash,
		&i.Phone,
		&i.Address,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user" 
WHERE email = $1
`

func (q *Queries) DeleteUser(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, email)
	return err
}

const getUser = `-- name: GetUser :one
SELECT email, username, pwd_hash, phone, address, balance, created_at, updated_at FROM "user"
WHERE email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Username,
		&i.PwdHash,
		&i.Phone,
		&i.Address,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT email, username, pwd_hash, phone, address, balance, created_at, updated_at FROM "user"
ORDER BY email
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Email,
			&i.Username,
			&i.PwdHash,
			&i.Phone,
			&i.Address,
			&i.Balance,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user" 
SET username = $2, pwd_hash = $3, phone = $4, address = $5, balance = $6
WHERE email = $1
RETURNING email, username, pwd_hash, phone, address, balance, created_at, updated_at
`

type UpdateUserParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
	PwdHash  string `json:"pwd_hash"`
	Phone    string `json:"phone"`
	Address  string `json:"address"`
	Balance  int32  `json:"balance"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Email,
		arg.Username,
		arg.PwdHash,
		arg.Phone,
		arg.Address,
		arg.Balance,
	)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Username,
		&i.PwdHash,
		&i.Phone,
		&i.Address,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
